class RequestsController < ApplicationController
  # GET /requests
  # GET /requests.json
  def index
    @requests = Request.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @requests }
    end
  end

  # GET /requests/1
  # GET /requests/1.json
  def show
    @request = Request.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @request }
    end
  end

  # GET /requests/new
  # GET /requests/new.json
  def new
    @request = Request.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @request }
    end
  end

  # GET /requests/1/edit
  def edit
    @request = Request.find(params[:id])
  end

  # POST /requests
  # POST /requests.json
  def create
    @request = Request.new(params[:request])

    @request.job_id = params[:job_id]
    @request.membership_id = current_user.memberships.where(group_id: @request.job.group.id).first.id
    respond_to do |format|
      if @request.save
        RequestsMailer.request_made(current_user, @request.job, @request).deliver
        request_created(@request.job, @request)
        format.html { redirect_to @request, notice: 'Request was successfully created.' }
        format.json { render json: @request, status: :created, location: @request }
      else
        format.html { render action: "new" }
        format.json { render json: @request.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /requests/1
  # PUT /requests/1.json
  def update
    @request = Request.find(params[:id])

    respond_to do |format|
      if @request.update_attributes(params[:request])
        RequestsMailer.request_modified(current_user,@request.job,@request).deliver
        format.html { redirect_to @request, notice: 'Request was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @request.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /requests/1
  # DELETE /requests/1.json
  def destroy
    @request = Request.find(params[:id])
    RequestsMailer.request_deleted(current_user,@request.job,@request).deliver
    @request.destroy

    respond_to do |format|
      format.html { redirect_to requests_url }
      format.json { head :no_content }
    end
  end
  def request_created(job, request)
          number_to_send_to = job.membership.user.phone
               
          twilio_sid = "AC33e9ab199968397d33f2398abf9ae19a"
          twilio_token = "c0f8a724ec1305fef69c7a3fc4fc25bf"
          twilio_phone_number = "8627037633"
                           
          @twilio_client = Twilio::REST::Client.new twilio_sid, twilio_token
                               
          @twilio_client.account.sms.messages.create(
            :from => "+1#{twilio_phone_number}",
            :to => number_to_send_to,
            :body => "Hi #{job.membership.user.first}, #{request.user.first} #{request.user.last} wants you to #{request.request_text} while you're doing #{job.name}. Reply to this text to leave a comment!"
            )
  end
end
